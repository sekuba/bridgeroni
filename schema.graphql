type MessageTransmitter_MessageReceived {
  id: ID!
  caller: String!
  sourceDomain: BigInt!
  nonce: BigInt!
  sender: String!
  messageBody: String!
}

type TokenMessenger_DepositForBurn {
  id: ID!
  nonce: BigInt!
  burnToken: String!
  amount: BigInt!
  depositor: String!
  mintRecipient: String!
  destinationDomain: BigInt!
  destinationTokenMessenger: String!
  destinationCaller: String!
}

type CCTPTransfer @entity {
  id: ID!

  # === identifying ===
  sourceDomain: BigInt!
  destinationDomain: BigInt
  nonce: BigInt!

  # === source-side ===
  amount: BigInt
  burnToken: String
  depositor: String
  mintRecipient: String
  sourceTxHash: String
  depositBlock: BigInt
  depositTimestamp: BigInt      # <-- new

  # === destination-side ===
  destinationTxHash: String
  messageReceivedBlock: BigInt
  messageReceivedTimestamp: BigInt   # <-- new

  # === derived ===
  latencySeconds: BigInt
  matched: Boolean!
}