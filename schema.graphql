type CrosschainMessage {
  id: ID!
  transport: String!
  messageKey: String!
  # Outbound
  outboundBlock: BigInt
  outboundTimestamp: BigInt
  outboundTxHash: String
  outboundChainId: BigInt
  outboundFrom: String
  # Inbound
  inboundBlock: BigInt
  inboundTimestamp: BigInt
  inboundTxHash: String
  inboundChainId: BigInt
  inboundTo: String
  # Status
  matched: Boolean!
  latency: BigInt
  # Route info
  routeSrcSlug: String
  routeDstSlug: String
  routeSrcEid: BigInt
  routeDstEid: BigInt
}

type AppPayload {
  id: ID!
  app: String!
  payloadType: String!
  # Transport association (relinkable)
  transportingProtocol: String
  transportingMessageId: String @index
  crosschainMessage: CrosschainMessage
  # Outbound fields
  outboundAssetAddress: String
  outboundAmount: BigInt
  outboundSender: String
  outboundTargetAddress: String
  outboundRaw: String
  # Inbound fields
  inboundAssetAddress: String
  inboundAmount: BigInt
  inboundRecipient: String
  inboundRaw: String
  # Status
  matched: Boolean!
}

"""
Stargate V2 Bus mode support entities.

We avoid sequence buffering and instead link bus passengers via their GUID and ticket IDs.
"""

type BusRodeOftSentLfg {
  id: ID!
  dstEid: BigInt
  ticketId: BigInt @index
  fare: BigInt
  passengerAssetId: String
  passengerReceiver: String
  passengerAmountSD: BigInt
  passengerNativeDrop: String
  # Filled by OFTSent (same tx):
  fromAddress: String
  amountSentLD: BigInt
  amountReceivedLD: BigInt
}

type BusDrivenOftReceivedLfg {
  id: ID! # guid
  passengerIds: [String!]!
}
