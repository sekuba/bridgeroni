type CrosschainMessage {
  id: ID!
  transport: String!
  messageKey: String!
  # Outbound
  outboundBlock: BigInt
  outboundTimestamp: BigInt
  outboundTxHash: String
  outboundChainId: BigInt
  outboundFrom: String
  # Inbound
  inboundBlock: BigInt
  inboundTimestamp: BigInt
  inboundTxHash: String
  inboundChainId: BigInt
  inboundTo: String
  # Status
  matched: Boolean!
  latency: BigInt
  # Route info
  routeSrcSlug: String
  routeDstSlug: String
  routeSrcEid: BigInt
  routeDstEid: BigInt
}

type AppPayload {
  id: ID!
  app: String!
  payloadType: String!
  # Transport association (relinkable)
  transportingProtocol: String
  transportingMessageId: String
  crosschainMessage: CrosschainMessage
  # Outbound fields
  outboundAssetAddress: String
  outboundAmount: BigInt
  outboundSender: String
  outboundTargetAddress: String
  outboundRaw: String
  # Inbound fields
  inboundAssetAddress: String
  inboundAmount: BigInt
  inboundRecipient: String
  inboundRaw: String
  # Status
  matched: Boolean!
}

# Stargate bus support: ticket mapping and inbound buffering
type BusIndex {
  id: ID! # "layerzero:{guid}"
  srcChainId: BigInt!
  ticketStart: BigInt!
  numPassengers: BigInt!
  nextInboundOrdinal: BigInt!
}

type InboundBufferHead {
  id: ID! # "layerzero:{guid}"
  nextSeq: BigInt!
  assignedSeq: BigInt!
}

type InboundBufferEntry {
  id: ID! # "layerzero:{guid}:{seq}"
  guid: String!
  seq: BigInt!
  chainId: BigInt!
  toAddress: String!
  amount: BigInt!
  txHash: String!
}
