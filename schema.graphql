# Raw events with enhanced metadata for TUI display
type MessageTransmitter_MessageReceived {
  id: ID!
  caller: String!
  sourceDomain: BigInt!
  nonce: BigInt!
  sender: String!
  messageBody: String!
  # Enhanced metadata
  chainId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  txHash: String!
}

# CCTPv2 MessageReceived event
type MessageTransmitter_MessageReceivedV2 {
  id: ID!
  caller: String!
  sourceDomain: BigInt!
  nonce: String!  # bytes32 in v2
  sender: String!
  finalityThresholdExecuted: BigInt!
  messageBody: String!
  # Enhanced metadata
  chainId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  txHash: String!
}

type TokenMessenger_DepositForBurn {
  id: ID!
  nonce: BigInt!
  burnToken: String!
  amount: BigInt!
  depositor: String!
  mintRecipient: String!
  destinationDomain: BigInt!
  destinationTokenMessenger: String!
  destinationCaller: String!
  # Enhanced metadata
  chainId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  txHash: String!
}

# CCTPv2 DepositForBurn event
type TokenMessenger_DepositForBurnV2 {
  id: ID!
  burnToken: String!
  amount: BigInt!
  depositor: String!
  mintRecipient: String!
  destinationDomain: BigInt!
  destinationTokenMessenger: String!
  destinationCaller: String!
  maxFee: BigInt!
  minFinalityThreshold: BigInt!
  hookData: String!
  # Enhanced metadata
  chainId: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  txHash: String!
}

type CCTPTransfer @entity {
  id: ID!

  # === identifying ===
  sourceDomain: BigInt!
  destinationDomain: BigInt
  nonce: String!  # Support both BigInt (v1) and bytes32 (v2) as string

  # === source-side ===
  amount: BigInt
  burnToken: String
  depositor: String
  mintRecipient: String
  sourceTxHash: String
  depositBlock: BigInt
  depositTimestamp: BigInt

  # === CCTPv2 specific fields ===
  maxFee: BigInt               # v2 only
  minFinalityThreshold: BigInt # v2 only  
  hookData: String             # v2 only
  finalityThresholdExecuted: BigInt # v2 only (destination side)

  # === destination-side ===
  destinationTxHash: String
  messageReceivedBlock: BigInt
  messageReceivedTimestamp: BigInt

  # === derived ===
  latencySeconds: BigInt
  matched: Boolean!
  
  # === computed fields for TUI efficiency ===
  hasAmount: Boolean!           # true if amount is not null (for display logic)
  sourceChainId: BigInt        # chain ID where deposit occurred
  destinationChainId: BigInt   # chain ID where message was received
  eventType: String!           # "deposit", "received", or "matched"
  lastUpdated: BigInt!         # timestamp of last update to this record
  version: String!             # "v1" or "v2"
}